{"version":3,"sources":["../../src/routes/localAuth.js"],"names":["router","post","requireLocalAuth","req","res","console","log","body","token","user","generateJWT","me","toJSON","json","next","error","Joi","validate","registerSchema","status","send","message","details","email","password","name","username","existingUser","User","findOne","newUser","provider","avatar","faker","image","registerUser","err","get","logout"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAEA;;AACA;;AACA;;;;AAEA,MAAMA,MAAM,GAAG,sBAAf;AAEAA,MAAM,CAACC,IAAP,CAAY,QAAZ,EAAsBC,yBAAtB,EAAwC,CAACC,GAAD,EAAMC,GAAN,KAAc;AACpDC,EAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BH,GAAG,CAACI,IAAlC;AACA,QAAMC,KAAK,GAAGL,GAAG,CAACM,IAAJ,CAASC,WAAT,EAAd;AACA,QAAMC,EAAE,GAAGR,GAAG,CAACM,IAAJ,CAASG,MAAT,EAAX;AACAR,EAAAA,GAAG,CAACS,IAAJ,CAAS;AAAEL,IAAAA,KAAF;AAASG,IAAAA;AAAT,GAAT;AACD,CALD;AAOAX,MAAM,CAACC,IAAP,CAAY,WAAZ,EAAyB,OAAOE,GAAP,EAAYC,GAAZ,EAAiBU,IAAjB,KAA0B;AACjD,QAAM;AAAEC,IAAAA;AAAF,MAAYC,aAAIC,QAAJ,CAAad,GAAG,CAACI,IAAjB,EAAuBW,0BAAvB,CAAlB;;AACA,MAAIH,KAAJ,EAAW;AACT,WAAOX,GAAG,CAACe,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,MAAAA,OAAO,EAAEN,KAAK,CAACO,OAAN,CAAc,CAAd,EAAiBD;AAA5B,KAArB,CAAP;AACD;;AAED,QAAM;AAAEE,IAAAA,KAAF;AAASC,IAAAA,QAAT;AAAmBC,IAAAA,IAAnB;AAAyBC,IAAAA;AAAzB,MAAsCvB,GAAG,CAACI,IAAhD;;AAEA,MAAI;AACF,UAAMoB,YAAY,GAAG,MAAMC,cAAKC,OAAL,CAAa;AAAEN,MAAAA;AAAF,KAAb,CAA3B;;AAEA,QAAII,YAAJ,EAAkB;AAChB,aAAOvB,GAAG,CAACe,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,QAAAA,OAAO,EAAE;AAAX,OAArB,CAAP;AACD;;AAED,QAAI;AACF,YAAMS,OAAO,GAAG,MAAM,IAAIF,aAAJ,CAAS;AAC7BG,QAAAA,QAAQ,EAAE,OADmB;AAE7BR,QAAAA,KAF6B;AAG7BC,QAAAA,QAH6B;AAI7BE,QAAAA,QAJ6B;AAK7BD,QAAAA,IAL6B;AAM7BO,QAAAA,MAAM,EAAEC,eAAMC,KAAN,CAAYF,MAAZ;AANqB,OAAT,CAAtB;AASAF,MAAAA,OAAO,CAACK,YAAR,CAAqBL,OAArB,EAA8B,CAACM,GAAD,EAAM3B,IAAN,KAAe;AAC3C,YAAI2B,GAAJ,EAAS,MAAMA,GAAN;AACThC,QAAAA,GAAG,CAACS,IAAJ,CAAS;AAAEQ,UAAAA,OAAO,EAAE;AAAX,SAAT,EAF2C,CAEC;AAC7C,OAHD;AAID,KAdD,CAcE,OAAOe,GAAP,EAAY;AACZ,aAAOtB,IAAI,CAACsB,GAAD,CAAX;AACD;AACF,GAxBD,CAwBE,OAAOA,GAAP,EAAY;AACZ,WAAOtB,IAAI,CAACsB,GAAD,CAAX;AACD;AACF,CAnCD,E,CAqCA;;AACApC,MAAM,CAACqC,GAAP,CAAW,SAAX,EAAsB,CAAClC,GAAD,EAAMC,GAAN,KAAc;AAClCD,EAAAA,GAAG,CAACmC,MAAJ;AACAlC,EAAAA,GAAG,CAACgB,IAAJ,CAAS,KAAT;AACD,CAHD;eAKepB,M","sourcesContent":["import { Router } from 'express';\nimport Joi from 'joi';\nimport faker from 'faker';\n\nimport User from '../models/User';\nimport requireLocalAuth from '../middleware/requireLocalAuth';\nimport { registerSchema } from '../services/validators';\n\nconst router = Router();\n\nrouter.post('/login', requireLocalAuth, (req, res) => {\n  console.log('login here +++', req.body);\n  const token = req.user.generateJWT();\n  const me = req.user.toJSON();\n  res.json({ token, me });\n});\n\nrouter.post('/register', async (req, res, next) => {\n  const { error } = Joi.validate(req.body, registerSchema);\n  if (error) {\n    return res.status(422).send({ message: error.details[0].message });\n  }\n\n  const { email, password, name, username } = req.body;\n\n  try {\n    const existingUser = await User.findOne({ email });\n\n    if (existingUser) {\n      return res.status(422).send({ message: 'Email is in use' });\n    }\n\n    try {\n      const newUser = await new User({\n        provider: 'email',\n        email,\n        password,\n        username,\n        name,\n        avatar: faker.image.avatar(),\n      });\n\n      newUser.registerUser(newUser, (err, user) => {\n        if (err) throw err;\n        res.json({ message: 'Register success.' }); // just redirect to login\n      });\n    } catch (err) {\n      return next(err);\n    }\n  } catch (err) {\n    return next(err);\n  }\n});\n\n// logout\nrouter.get('/logout', (req, res) => {\n  req.logout();\n  res.send(false);\n});\n\nexport default router;\n"],"file":"localAuth.js"}